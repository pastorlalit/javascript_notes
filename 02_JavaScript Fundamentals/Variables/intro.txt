- Variables are Containers for Storing Data
- JavaScript Variables can be declared in 4 ways:
    - Automatically
    - Using var
    - Using let
    - Using const
**********************************************
- Variable Declaration vs. Initialization
    For storing any value, we need a variable, so first, we will declare a var variable and then initialize the value into the variable.

Let's see it by an example-

    var myName;
    myName = "my name";
    console.log(myName) //output => "my name"

In the example above, we declared a variable myName in the first line and then initialized the string value "my name" in the second line.

In the above example, we take a two-step approach, first declare a variable and then Initialize it, but we can do declaration and initialization at the same time like this -

    var myName = "my name";
    console.log(myName); //output => "my name"

In the above example, we take the var variable as an example, but we can do Declaration and initialization, same with the let and const.

**********************************************
Function-scope vs. Block-scope
Before we get into the difference between let and var and const in javascript, let us learn some of the differences between function-scope and block-scope:

Scope

Scope stands for where our variable will be available to use inside our code and where it will not.

Let's take an example to understand it -


    function myFun() {
        var myName  = "my name";
        console.log(myName);
    }

myFun(); //output => "my name"
console.log(myName); //output => ReferenceError


In the example, we have a function myFun(); inside the function, we declare a variable myName and print the variable myName on the console.

When we call our function myFun it successfully prints the value of variable myName on the console, but when we try to print the variable myName outside the function, it throws referenceError because variable myName has a function scope that's why it's not accessible outside the function.

Function scope

Variable having Function-scope means variable will only be available to use inside the function it declared, will not be accessible outside of function, and will give Reference Error if we try to access.

Here is an example -

function name() {
    var myAge = 22;
    console.log(myAge); 
}

name() //output => 22(

console.log(myAge); //output => ReferenceError

In the example, we make a function name() then we declare a variablemyAge inside the function, when we call the function, it prints the myAge variable on the console, But when we try to access the variable outside the function, it's throwing a Reference Error.

Block-scope
---------------

Block means a pair of curly brackets, a block can be anything that contains an opening and closing curly bracket.

Variable having Block-scope will only be available to use inside the block it declared, will not be accessible outside the block, and will give Reference Error if we try to access.

Here is an example -

if(true) {
    let myName = "your name";
    console.log(myName); //output=> "your name"
}
console.log(myName); //output => ReferenceError

In the example above, we have an if block with a true condition, and inside the if block, we declare a variable name myName. Now when we try to print the myName variable to the console, it prints successfully, but when we try to print the variable outside the if block, we get a Reference Error.
**********************************************

What is the var Variable in JS?
Var variable is the old way to declare a variable in javascript; var variable has the function scope, But global scope when it is declared outside the function.

Example of var variable with function scope:

    function myFun() {
        var myName = "my name";
        console.log(myName);
    }
    myFun(); //output => "my name"
    console.log(myName); //output=> re


In the example above, we have a function myFun(), inside the function, we declare a variable myName and print it on the console.

When we call the function, it successfully prints the variable myName on the console, but when we try to print the variable myName outside the function, it throws ReferenceError because it's not accessible outside the function.

When we declare a var variable outside the function, it will have a global scope and will be available to use everywhere inside the whole program.

Example of var variable having global scope:

    var myName = "your name";

    function myFun() {
        console.log(myName); 
    }

    myFun(); //output => "your name"

    if(true) {
        console.log(myName); //output => "your name"
    }

console.log(myName); //output => "your name"


In the above example, we have a variable myName which is declared outside the function body, and that's why having global scope.

Now, we tried to access this variable inside our function myFun, it print's the variable into the console, next we have an if block with the condition of true; inside this if block, we again print the variable myName to the console and it's accessible here also.

The last thing we do is to directly access the variable, and we successfully access the variable and print it on the console.

As we can see, the variable myName is accessible everywhere inside our program because it has global scope.
---------------------------
Hoisting of var Variable
----------------------------

When we declare a var variable, it gets hoisted to the top of the scope and gets assigned the value of undefined. Let's take an example to understand it -

console.log(myName); //output => undefined 
var myName = "my name";

In the example above, we are trying to access the variable myName before the declaration.

Here is what it will look like when the variable myName gets hoisted to the top of the scope -

var myName;
console.log(myName); //output => undefined 
myName = "my name";

We can see here our variable gets hoisted to the top of the scope and initialized with undefined, but the initialization of the value happens where the variable was declared.

If we talk about only hoisting, it's a feature provided by javascript which moves variables and functions to the top of scope before code execution; It also happens when we make a function declaration.

Example of a function declaration:

    myFun() //output => "my name"
    function myFun() {
        var myName = "my name";
        console.log(myName);
    }

In the example above, we are calling the function before the declaration, but still, it calls the function successfully.

Our example code will look like this after getting moved to the top:

    function myFun() {
        var myName = "my name";
        console.log(myName);
    }
    myFun() //output => "my name"

Problem with the var Variable

var variable can be re-declared and updated. re-declaration allows declaring more than one variable with the same name, because of this reason, if we declare a new variable by mistake, it will override the original variable value.
Let's discuss how it can be re-declared with an example-

    var name = "my name";
    var myAge = 22;

    if(myAge > 18) {
        var name = "another person name";
    }

console.log(name); //output => "another person name"

Here we have a name variable, an age variable, and an if conditional block, our if condition is true here, so code inside the if block will run and override the previously declared name variable because of re-declaration behavior of var variable. This behavior can affect the output of code and lead to unexpected output.

Another problem was not able to declare a constant variable. It's okay when we want to declare a variable that can be changed/updated, but what if we want to declare a constant variable that can't be changed once it is declared.
************************

Declaring varible using Let 
 -- Block scope 
 --does not allow re-declaration of variables, 
    let myName = "my name";
scope of let variable

The let variable has block scope, meaning let variable will be accessible only inside the block it's declared if we try of access outside of the scope, it will show a Reference Error.

Hoisting of let variable

let variable also get hoisted to the top of the scope But does not get assigned any value, as a result, if we try to access the let variable before declaration it will throw a syntax error because it doesn't have any value to print.

console.log(myName); //output => ReferenceError
let myName = "my name";

